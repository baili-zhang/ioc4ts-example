declare module 'ioc4ts' {
    /* view 注解 */
    export function View (name: string) : (ctor: any) => void
    /* core 注解 */
    export function ReturnType (type: string) : (ctor: any, propertyKey: string, descriptor: PropertyDescriptor) => void
    export function Property (name: string) : (ctor: any, propertyKey: string) => void
    /* web http method 注解 */
    export function Get (path: string) : (ctor: any, propertyKey: string, descriptor: PropertyDescriptor) => void
    export function Post (path: string) : (ctor: any, propertyKey: string, descriptor: PropertyDescriptor) => void
    export function Put (path: string) : (ctor: any, propertyKey: string, descriptor: PropertyDescriptor) => void
    export function Delete (path: string) : (ctor: any, propertyKey: string, descriptor: PropertyDescriptor) => void
    /* web 其他注解 */
    export function PathVariable (name: string) : (ctor: any, propertyKey: string, parameterIndex: number) => void
    export function RequestBody (name: string) : (ctor: any, propertyKey: string, parameterIndex: number) => void
    export function RequestHeader (name: string) : (ctor: any, propertyKey: string, parameterIndex: number) => void
    export function RequestParam (name: string) : (ctor: any, propertyKey: string, parameterIndex: number) => void
    export function HttpRequest () : (ctor: any) => void

    export type HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE'

    export interface HttpRequestParams {
        [x:string]: string
    }

    export interface HttpRequestHeaders {
        [x:string]: string
    }

    export interface HttpRequestConfig<T> {
        method: HttpMethod
        path: string
    
        baseUrl?: string
        params?: HttpRequestParams
        headers?: HttpRequestHeaders
        data?: T
    }

    export interface HttpRequestInterface {
        request(data : HttpRequestConfig<any>) : Promise<any>
    }

    class BeanFactory {
        getBeanClass(name: string): any
        check(): void
    }

    interface ApplicationContextConfig {
        log: boolean
    }

    /**
     * 应用上下文
    */
    export default class ApplicationContext {
        static getInstance (config?: ApplicationContextConfig) : ApplicationContext
        getBeanFactory() : BeanFactory
    }
}