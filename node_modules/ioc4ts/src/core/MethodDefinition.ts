/**
 * MethodDefinition 类
 * 
 * 实现对 bean 对象方法的定义
 * 
 * @author zhangbaili
 * @since 2021/10/24
*/

import Log from './utils/Log'

export default class MethodDefinition {
    /**
     * parameters: Map<type, Map<name, index>>
     * 
     * @field type: 参数类型
     * @field name: 参数名称
     * @field index: 参数的索引位置
    */
    private parameters: Map<string, Map<string, number> | number>
    private returnType?: string
    private descriptor?: PropertyDescriptor
    /**
     * 方法的名称
    */
    private methodName: string

    constructor(methodName: string) {
        this.parameters = new Map<string, Map<string, number> | number>()
        this.methodName = methodName
    }

    /**
     * 给方法增加参数定义
     * 
     * @param type 参数的类型，例如：PathVariable
     * @param name 参数的名称，例如：PathVariable(id: string) 中的参数 id，可以为 undefined，例如：RequestBody 不需要参数名称
     * @param index 参数的索引
    */
    appendParameter(type: string, name: string | undefined, index: number) {
        const log = () => {
            if(Log.isLog()) {
                Log.info('Method', `Method "${this.methodName}" append "${type}" parameter, name is "${name}".`)
            }
        }

        if(name === undefined) {
            if(this.parameters.get(type)) {
                throw new Error(`Error: Parameters with type "${type}" has already exist !`)
            }
            this.parameters.set(type, index)
            log()
            return
        }

        let nameMap = this.parameters.get(type)

        if(nameMap) {
            if(!(nameMap instanceof Map)) {
                throw new Error(`Error: Parameters with type "${type}" cannot set to both with name and without name !`)
            }

            if(nameMap.get(name)) {
                throw new Error(`Error: Duplicate method parameter name "${name}" for type "${type}" !`)
            }

            nameMap.set(name, index)
            log()
            return
        }

        nameMap = new Map<string, number>()
        nameMap.set(name, index)
        this.parameters.set(type, nameMap)
        log()
    }

    copyFrom(source: MethodDefinition) {
        this.parameters = source.getParameters()
        this.returnType = source.getReturnType()
        this.descriptor = source.getDescriptor()
    }

    getParameters() {
        return this.parameters
    }

    getReturnType() {
        return this.returnType
    }

    getDescriptor() {
        return this.descriptor
    }

    setReturnType(returnType : string) {
        this.returnType = returnType

        if(Log.isLog()) {
            Log.info('Method', `Method "${this.methodName}" set ReturnType to "${returnType}".`)
        }
    }

    setDescriptor(descriptor: PropertyDescriptor) {
        this.descriptor = descriptor
        this.afterSetDescriptor()
    }

    afterSetDescriptor() {

    }
}