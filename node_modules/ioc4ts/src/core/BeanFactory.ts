/**
 * BeanFactory 类
 * 
 * Bean 工厂， 生成 bean 实例
 * 
 * @author zhangbaili
 * @since 2021/10/23
*/

import BeanDefinition from './BeanDefinition'
import DefaultSingletonBeanRegistry from './DefaultSingletonBeanRegistry'

export default class BeanFactory extends DefaultSingletonBeanRegistry {
    private beanDefinitionMap : Map<string, BeanDefinition>

    constructor () {
        super()
        this.beanDefinitionMap = new Map<string, BeanDefinition>()
    }

    loadBeanDefinition(ctor: ObjectConstructor) {
        if(this.beanDefinitionMap.get(ctor.name)) {
            throw new Error('bean: "' + ctor.name + '" has already existed !')
        }

        const beanDefinition = new BeanDefinition(ctor)
        this.beanDefinitionMap.set(ctor.name, beanDefinition)

        return beanDefinition
    }

    getBeanDefinitionByCtor(ctor: ObjectConstructor) : BeanDefinition | undefined  {
        return this.beanDefinitionMap.get(ctor.name)
    }

    getBeanClass(name: string) : any {
        const beanDefinition = this.beanDefinitionMap.get(name)
        if(!beanDefinition) {
            throw new Error(`Bean "${name}": is not exist !"`)
        }

        return beanDefinition.getCtor()
    }

    getBean(name: string | undefined, resource: object) {
        if(!name) {
            return resource
        }

        const beanDefinition = this.beanDefinitionMap.get(name)
        if(!beanDefinition) {
            throw new Error(`Bean "${name}: is not exist !"`)
        }

        const ctor = beanDefinition.getCtor()
        const bean = new ctor() as any
        
        Object.entries(resource).map(item => {
            const propertyKey = beanDefinition.getProperties().get(item[0])
            if(propertyKey) {
                bean[propertyKey] = item[1]
            }
        })

        return bean
    }

    check() {
        console.log('---------- BeanFactory Check ----------')
        for(const item of this.beanDefinitionMap) {
            console.log(item[0], item[1])
            
            console.log('\n')
            for(const method of item[1].getMethods()) {
                console.log(method[0], method[1])
            }
            console.log('\n')
        }
        console.log('----------     Check end     ----------')
    }
}