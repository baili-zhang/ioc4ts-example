/**
 * BeanDefinition 类
 * 
 * bean 对象的定义，包括属性和方法的定义
 * 
 * @author zhangbaili
 * @since 2021/10/13
*/

import MethodDefinition from './MethodDefinition'
import Log from './utils/Log'

export default class BeanDefinition {

    /**
     * bean 对象的构造器
    */
    private ctor: ObjectConstructor

    /**
     * bean 对象的属性列表
    */
    private properties: Map<string, string>

    /**
     * bean 的方法列表
    */
    private methods: Map<string, MethodDefinition>

    constructor(ctor: ObjectConstructor) {
        this.properties = new Map<string, string>()
        this.methods = new Map<string, MethodDefinition>()
        this.ctor = ctor
    }

    getCtor() {
        return this.ctor
    }

    getProperties () {
        return this.properties
    }

    getMethods() {
        return this.methods
    }

    appendProperty (name: string, propertyKey: string) {
        if(this.properties.has(name)) {
            throw new Error(`Properties name: "${name}" has already existed !`)
        }

        this.properties.set(name, propertyKey)

        if(Log.isLog()) {
            Log.info('Bean', `Bean "${this.ctor.name}" append property "${propertyKey}", read from key "${name}".`)
        }
    }

    appendMethod (name: string, methodDefinition: MethodDefinition) {
        if(this.methods.has(name)) {
            throw new Error(`Method name: "${name}" has already existed !`)
        }

        this.methods.set(name, methodDefinition)

        if(Log.isLog()) {
            Log.info('Bean', `Bean "${this.ctor.name}" append method "${name}".`)
        }
    }

    replaceMethod (name: string, methodDefinition: MethodDefinition) {
        if(!this.methods.has(name)) {
            throw new Error(`Error: Replace method name ${name} is not existed !`)
        }

        this.methods.set(name, methodDefinition)

        if(Log.isLog()) {
            Log.info('Bean', `Replace Bean "${this.ctor.name}" method "${name}", final method info: [${methodDefinition}].`)
        }
    }
}