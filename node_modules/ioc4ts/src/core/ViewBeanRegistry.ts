/**
 * ViewBeanRegistry ç±»
 * 
 * @author zhangbaili
 * @since 1.2.2-beta
*/

import BeanFactory from './BeanFactory'
import BeanDefinition from './BeanDefinition'
import Log from './utils/Log'

export default class ViewBeanRegistry extends BeanFactory {
    private viewBeanDefinitions: Map<string, BeanDefinition>

    constructor() {
        super()
        this.viewBeanDefinitions = new Map<string, BeanDefinition>()
    }

    registerView(id: string, ctor: ObjectConstructor) {
        if(this.viewBeanDefinitions.has(id)) {
            throw new Error(`Error: View with id "${id} has exist !"`)
        }

        const beanDefinition = this.loadBeanDefinition(ctor)
        this.viewBeanDefinitions.set(id, beanDefinition)

        if(Log.isLog()) {
            Log.info("View", `Register view with id "${id}".`)
        }
    }

    getView(id: string) {
        const beanDefinition = this.viewBeanDefinitions.get(id)
        if(!beanDefinition) {
            throw new Error(`Error: View with id "${id}" is not found !`)
        }

        return beanDefinition
    }

    async mountAll() {
        for(const view of this.viewBeanDefinitions) {
            const id = view[0]
            const ctor = view[1].getCtor()

            if(document) {
                const element = document.getElementById(id)
                if(!element) {
                    throw new Error(`Error: Element with id '${id}' is not found !`)
                }

                const viewInstance = new ctor() as any

                if(!viewInstance.render || !(viewInstance.render instanceof Function)) {
                    throw new Error(`Error: View instance with id "${id}" has no method named "render".`)
                }

                const html = viewInstance.render()

                if(html instanceof Promise) {
                    element.innerHTML = await html
                } else {
                    element.innerHTML = html
                }
            }
        }
    }
}