/**
 * HttpBeanMethodDefinition
 * 
 * 定义 http 方法
 * 
 * @author zhangbaili
 * @since 2021/10/23
*/

import ApplicationContext from '../core/ApplicationContext'
import MethodDefinition from '../core/MethodDefinition'
import HttpRequestInterface, { HttpMethod, HttpRequestConfig, HttpRequestHeaders, HttpRequestParams } from './HttpRequestInterface'
import PathResolver from './PathResolver'

export default class HttpBeanMethodDefinition extends MethodDefinition {
    private method?: HttpMethod
    private path?: string

    constructor(name: string) {
        super(name)
    }

    getMethod() {
        return this.method
    }

    getPath() {
        return this.path
    }

    setMethod(method: HttpMethod) {
        this.method = method
    }

    setPath(path: string) {
        this.path = path
    }

    afterSetDescriptor () {
        const descriptor = this.getDescriptor()
        if(descriptor) {
            descriptor.value = this.generate()
        }
    }

    generate() : () => void {
        return (function (_this : HttpBeanMethodDefinition) {
            return async function() {
                const parameters = _this.getParameters()
                const returnType = _this.getReturnType()

                const rawPath = _this.getPath()
                const method = _this.getMethod()

                if(!rawPath) {
                    throw new Error(`${method}: "path" cannot be null !`)
                }

                if(!method) {
                    throw new Error('HttpRequest: "method" cannot be null !')
                }

                const path = PathResolver.resolve(rawPath, parameters, arguments)

                const httpRequestConfig: HttpRequestConfig<unknown> = { method, path }

                const requestParams = parameters.get('RequestParam')
                const params = {} as HttpRequestParams

                if(requestParams instanceof Map) {
                    for(const param of requestParams) {
                        params[param[0]] = arguments[param[1]]
                    }
                }

                if(Object.getOwnPropertyNames(params).length !== 0) {
                    httpRequestConfig.params = params
                }

                const index = parameters.get('RequestBody')
                if(typeof index === 'number') {
                    const data = arguments[index]
                    if(data) httpRequestConfig.data = data
                }

                const requestHeaders = parameters.get('RequestHeader')
                const headers = {} as HttpRequestHeaders

                if(requestHeaders instanceof Map) {
                    for(const header of requestHeaders) {
                        headers[header[0]] = arguments[header[1]]
                    }
                }

                if(Object.getOwnPropertyNames(headers).length !== 0) {
                    httpRequestConfig.headers = headers
                }

                const beanFactory = ApplicationContext.getInstance().getBeanFactory()
                const httpRequest = ApplicationContext.getInstance().getBeanFactory().getSingleton('HttpRequest') as HttpRequestInterface
    
                try {
                    const resource = (await httpRequest.request(httpRequestConfig)).data
                    return beanFactory.getBean(returnType, resource)
                } catch (error) {
                    return { error }
                }
            }
        }) (this)
    }

    toString() {
        return `${this.method} method, path is "${this.path}"`
    }
}