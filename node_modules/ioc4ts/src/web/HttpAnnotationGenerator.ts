/**
 * HttpAnnotationGenerator ç±»
 * 
 * @author zhangbaili
 * @since 1.1.0-beta
*/

import ApplicationContext from '../core/ApplicationContext'
import MethodDefinition from '../core/MethodDefinition'
import HttpBeanMethodDefinition from './HttpBeanMethodDefinition'
import { HttpMethod } from './HttpRequestInterface'

export default class HttpAnnotationGenerator {
    static generate (httpMethod: HttpMethod, path: string) {
        return (ctor: any, methodName: string, descriptor: PropertyDescriptor) => {

            const setMethodDefinition = (methodDefinition: HttpBeanMethodDefinition, path: string, descriptor: PropertyDescriptor) => {
                methodDefinition.setMethod(httpMethod)
                methodDefinition.setPath(path)
                methodDefinition.setDescriptor(descriptor)
            }

            const beanFactory = ApplicationContext.getInstance().getBeanFactory()
            const beanDefinition = beanFactory.getBeanDefinitionByCtor(ctor)

            if(beanDefinition) {
                const methodDefinition = beanDefinition.getMethods().get(methodName)
                if(!methodDefinition) {
                    const getBeanMethodDefinition = new HttpBeanMethodDefinition(methodName)
                    setMethodDefinition(getBeanMethodDefinition, path, descriptor)
                    beanDefinition.appendMethod(methodName, getBeanMethodDefinition)
                } else {
                    if(!(methodDefinition instanceof MethodDefinition)) {
                        throw new Error(`Error: @${httpMethod} cannot work with ...`)
                    }
                    const getBeanMethodDefinition = new HttpBeanMethodDefinition(methodName)
                    getBeanMethodDefinition.copyFrom(methodDefinition)
                    setMethodDefinition(getBeanMethodDefinition, path, descriptor)
                    beanDefinition.replaceMethod(methodName, getBeanMethodDefinition)
                }
            } else {
                const newBeanDefinition = beanFactory.loadBeanDefinition(ctor)
                const methodDefinition = new HttpBeanMethodDefinition(methodName)

                setMethodDefinition(methodDefinition, path, descriptor)
                newBeanDefinition.appendMethod(methodName, methodDefinition)
            }
        }
    }
}