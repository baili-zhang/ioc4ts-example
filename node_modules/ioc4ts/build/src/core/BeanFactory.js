"use strict";
/**
 * BeanFactory 类
 *
 * Bean 工厂， 生成 bean 实例
 *
 * @author zhangbaili
 * @since 2021/10/23
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const BeanDefinition_1 = __importDefault(require("./BeanDefinition"));
const DefaultSingletonBeanRegistry_1 = __importDefault(require("./DefaultSingletonBeanRegistry"));
class BeanFactory extends DefaultSingletonBeanRegistry_1.default {
    constructor() {
        super();
        this.beanDefinitionMap = new Map();
        this.log = false;
    }
    loadBeanDefinition(ctor) {
        if (this.beanDefinitionMap.get(ctor.name)) {
            throw new Error('bean: "' + ctor.name + '" has already existed !');
        }
        const beanDefinition = new BeanDefinition_1.default(ctor);
        this.beanDefinitionMap.set(ctor.name, beanDefinition);
        return beanDefinition;
    }
    getBeanDefinitionByCtor(ctor) {
        return this.beanDefinitionMap.get(ctor.name);
    }
    getBeanClass(name) {
        const beanDefinition = this.beanDefinitionMap.get(name);
        if (!beanDefinition) {
            throw new Error(`Bean "${name}": is not exist !"`);
        }
        return beanDefinition.getCtor();
    }
    getBean(name, resource) {
        if (!name) {
            return resource;
        }
        const beanDefinition = this.beanDefinitionMap.get(name);
        if (!beanDefinition) {
            throw new Error(`Bean "${name}: is not exist !"`);
        }
        const ctor = beanDefinition.getCtor();
        const bean = new ctor();
        Object.entries(resource).map(item => {
            const propertyKey = beanDefinition.getProperties().get(item[0]);
            if (propertyKey) {
                bean[propertyKey] = item[1];
            }
        });
        return bean;
    }
    setLog(log) {
        this.log = log;
    }
    isLog() {
        return this.log;
    }
    check() {
        console.log('---------- BeanFactory Check ----------');
        for (const item of this.beanDefinitionMap) {
            console.log(item[0], item[1]);
            console.log('\n');
            for (const method of item[1].getMethods()) {
                console.log(method[0], method[1]);
            }
            console.log('\n');
        }
        console.log('----------     Check end     ----------');
    }
}
exports.default = BeanFactory;
