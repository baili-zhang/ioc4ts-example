"use strict";
/**
 * MethodDefinition 类
 *
 * 实现对 bean 对象方法的定义
 *
 * @author zhangbaili
 * @since 2021/10/24
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Log_1 = __importDefault(require("./utils/Log"));
class MethodDefinition {
    constructor(methodName) {
        this.parameters = new Map();
        this.methodName = methodName;
    }
    /**
     * 给方法增加参数定义
     *
     * @param type 参数的类型，例如：PathVariable
     * @param name 参数的名称，例如：PathVariable(id: string) 中的参数 id，可以为 undefined，例如：RequestBody 不需要参数名称
     * @param index 参数的索引
    */
    appendParameter(type, name, index) {
        const log = () => {
            if (Log_1.default.isLog()) {
                Log_1.default.info('Method', `Method "${this.methodName}" append "${type}" parameter, name is "${name}".`);
            }
        };
        if (name === undefined) {
            if (this.parameters.get(type)) {
                throw new Error(`Error: Parameters with type "${type}" has already exist !`);
            }
            this.parameters.set(type, index);
            log();
            return;
        }
        let nameMap = this.parameters.get(type);
        if (nameMap) {
            if (!(nameMap instanceof Map)) {
                throw new Error(`Error: Parameters with type "${type}" cannot set to both with name and without name !`);
            }
            if (nameMap.get(name)) {
                throw new Error(`Error: Duplicate method parameter name "${name}" for type "${type}" !`);
            }
            nameMap.set(name, index);
            log();
            return;
        }
        nameMap = new Map();
        nameMap.set(name, index);
        this.parameters.set(type, nameMap);
        log();
    }
    copyFrom(source) {
        this.parameters = source.getParameters();
        this.returnType = source.getReturnType();
        this.descriptor = source.getDescriptor();
    }
    getParameters() {
        return this.parameters;
    }
    getReturnType() {
        return this.returnType;
    }
    getDescriptor() {
        return this.descriptor;
    }
    setReturnType(returnType) {
        this.returnType = returnType;
        if (Log_1.default.isLog()) {
            Log_1.default.info('Method', `Method "${this.methodName}" set ReturnType to "${returnType}".`);
        }
    }
    setDescriptor(descriptor) {
        this.descriptor = descriptor;
        this.afterSetDescriptor();
    }
    afterSetDescriptor() {
    }
}
exports.default = MethodDefinition;
