"use strict";
/**
 * BeanDefinition 类
 *
 * bean 对象的定义，包括属性和方法的定义
 *
 * @author zhangbaili
 * @since 2021/10/13
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Log_1 = __importDefault(require("./utils/Log"));
class BeanDefinition {
    constructor(ctor) {
        this.properties = new Map();
        this.methods = new Map();
        this.ctor = ctor;
    }
    getCtor() {
        return this.ctor;
    }
    getProperties() {
        return this.properties;
    }
    getMethods() {
        return this.methods;
    }
    appendProperty(name, propertyKey) {
        if (this.properties.has(name)) {
            throw new Error(`Properties name: "${name}" has already existed !`);
        }
        this.properties.set(name, propertyKey);
        if (Log_1.default.isLog()) {
            Log_1.default.info('Bean', `Bean "${this.ctor.name}" append property "${propertyKey}", read from key "${name}".`);
        }
    }
    appendMethod(name, methodDefinition) {
        if (this.methods.has(name)) {
            throw new Error(`Method name: "${name}" has already existed !`);
        }
        this.methods.set(name, methodDefinition);
        if (Log_1.default.isLog()) {
            Log_1.default.info('Bean', `Bean "${this.ctor.name}" append method "${name}".`);
        }
    }
    replaceMethod(name, methodDefinition) {
        if (!this.methods.has(name)) {
            throw new Error(`Error: Replace method name ${name} is not existed !`);
        }
        this.methods.set(name, methodDefinition);
        if (Log_1.default.isLog()) {
            Log_1.default.info('Bean', `Replace Bean "${this.ctor.name}" method "${name}", final method info: [${methodDefinition}].`);
        }
    }
}
exports.default = BeanDefinition;
