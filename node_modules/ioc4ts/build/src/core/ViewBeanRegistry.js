"use strict";
/**
 * ViewBeanRegistry ç±»
 *
 * @author zhangbaili
 * @since 1.2.2-beta
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const BeanFactory_1 = __importDefault(require("./BeanFactory"));
const Log_1 = __importDefault(require("./utils/Log"));
class ViewBeanRegistry extends BeanFactory_1.default {
    constructor() {
        super();
        this.viewBeanDefinitions = new Map();
    }
    registerView(id, ctor) {
        if (this.viewBeanDefinitions.has(id)) {
            throw new Error(`Error: View with id "${id} has exist !"`);
        }
        const beanDefinition = this.loadBeanDefinition(ctor);
        this.viewBeanDefinitions.set(id, beanDefinition);
        if (Log_1.default.isLog()) {
            Log_1.default.info("View", `Register view with id "${id}".`);
        }
    }
    getView(id) {
        const beanDefinition = this.viewBeanDefinitions.get(id);
        if (!beanDefinition) {
            throw new Error(`Error: View with id "${id}" is not found !`);
        }
        return beanDefinition;
    }
    mountAll() {
        return __awaiter(this, void 0, void 0, function* () {
            for (const view of this.viewBeanDefinitions) {
                const id = view[0];
                const ctor = view[1].getCtor();
                if (document) {
                    const element = document.getElementById(id);
                    if (!element) {
                        throw new Error(`Error: Element with id '${id}' is not found !`);
                    }
                    const viewInstance = new ctor();
                    if (!viewInstance.render || !(viewInstance.render instanceof Function)) {
                        throw new Error(`Error: View instance with id "${id}" has no method named "render".`);
                    }
                    const html = viewInstance.render();
                    if (html instanceof Promise) {
                        element.innerHTML = yield html;
                    }
                    else {
                        element.innerHTML = html;
                    }
                }
            }
        });
    }
}
exports.default = ViewBeanRegistry;
