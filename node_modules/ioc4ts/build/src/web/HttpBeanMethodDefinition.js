"use strict";
/**
 * HttpBeanMethodDefinition
 *
 * 定义 http 方法
 *
 * @author zhangbaili
 * @since 2021/10/23
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ApplicationContext_1 = __importDefault(require("../core/ApplicationContext"));
const MethodDefinition_1 = __importDefault(require("../core/MethodDefinition"));
const PathResolver_1 = __importDefault(require("./PathResolver"));
class HttpBeanMethodDefinition extends MethodDefinition_1.default {
    constructor(name) {
        super(name);
    }
    getMethod() {
        return this.method;
    }
    getPath() {
        return this.path;
    }
    setMethod(method) {
        this.method = method;
    }
    setPath(path) {
        this.path = path;
    }
    afterSetDescriptor() {
        const descriptor = this.getDescriptor();
        if (descriptor) {
            descriptor.value = this.generate();
        }
    }
    generate() {
        return (function (_this) {
            return function () {
                return __awaiter(this, arguments, void 0, function* () {
                    const parameters = _this.getParameters();
                    const returnType = _this.getReturnType();
                    const rawPath = _this.getPath();
                    const method = _this.getMethod();
                    if (!rawPath) {
                        throw new Error(`${method}: "path" cannot be null !`);
                    }
                    if (!method) {
                        throw new Error('HttpRequest: "method" cannot be null !');
                    }
                    const path = PathResolver_1.default.resolve(rawPath, parameters, arguments);
                    const httpRequestConfig = { method, path };
                    const requestParams = parameters.get('RequestParam');
                    const params = {};
                    if (requestParams instanceof Map) {
                        for (const param of requestParams) {
                            params[param[0]] = arguments[param[1]];
                        }
                    }
                    if (Object.getOwnPropertyNames(params).length !== 0) {
                        httpRequestConfig.params = params;
                    }
                    const index = parameters.get('RequestBody');
                    if (typeof index === 'number') {
                        const data = arguments[index];
                        if (data)
                            httpRequestConfig.data = data;
                    }
                    const requestHeaders = parameters.get('RequestHeader');
                    const headers = {};
                    if (requestHeaders instanceof Map) {
                        for (const header of requestHeaders) {
                            headers[header[0]] = arguments[header[1]];
                        }
                    }
                    if (Object.getOwnPropertyNames(headers).length !== 0) {
                        httpRequestConfig.headers = headers;
                    }
                    const beanFactory = ApplicationContext_1.default.getInstance().getBeanFactory();
                    const httpRequest = ApplicationContext_1.default.getInstance().getBeanFactory().getSingleton('HttpRequest');
                    try {
                        const resource = (yield httpRequest.request(httpRequestConfig)).data;
                        return beanFactory.getBean(returnType, resource);
                    }
                    catch (error) {
                        return { error };
                    }
                });
            };
        })(this);
    }
    toString() {
        return `${this.method} method, path is "${this.path}"`;
    }
}
exports.default = HttpBeanMethodDefinition;
