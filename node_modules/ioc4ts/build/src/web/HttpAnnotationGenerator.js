"use strict";
/**
 * HttpAnnotationGenerator ç±»
 *
 * @author zhangbaili
 * @since 1.1.0-beta
*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ApplicationContext_1 = __importDefault(require("../core/ApplicationContext"));
const MethodDefinition_1 = __importDefault(require("../core/MethodDefinition"));
const HttpBeanMethodDefinition_1 = __importDefault(require("./HttpBeanMethodDefinition"));
class HttpAnnotationGenerator {
    static generate(httpMethod, path) {
        return (ctor, methodName, descriptor) => {
            const setMethodDefinition = (methodDefinition, path, descriptor) => {
                methodDefinition.setMethod(httpMethod);
                methodDefinition.setPath(path);
                methodDefinition.setDescriptor(descriptor);
            };
            const beanFactory = ApplicationContext_1.default.getInstance().getBeanFactory();
            const beanDefinition = beanFactory.getBeanDefinitionByCtor(ctor);
            if (beanDefinition) {
                const methodDefinition = beanDefinition.getMethods().get(methodName);
                if (!methodDefinition) {
                    const getBeanMethodDefinition = new HttpBeanMethodDefinition_1.default(methodName);
                    setMethodDefinition(getBeanMethodDefinition, path, descriptor);
                    beanDefinition.appendMethod(methodName, getBeanMethodDefinition);
                }
                else {
                    if (!(methodDefinition instanceof MethodDefinition_1.default)) {
                        throw new Error(`Error: @${httpMethod} cannot work with ...`);
                    }
                    const getBeanMethodDefinition = new HttpBeanMethodDefinition_1.default(methodName);
                    getBeanMethodDefinition.copyFrom(methodDefinition);
                    setMethodDefinition(getBeanMethodDefinition, path, descriptor);
                    beanDefinition.replaceMethod(methodName, getBeanMethodDefinition);
                }
            }
            else {
                const newBeanDefinition = beanFactory.loadBeanDefinition(ctor);
                const methodDefinition = new HttpBeanMethodDefinition_1.default(methodName);
                setMethodDefinition(methodDefinition, path, descriptor);
                newBeanDefinition.appendMethod(methodName, methodDefinition);
            }
        };
    }
}
exports.default = HttpAnnotationGenerator;
